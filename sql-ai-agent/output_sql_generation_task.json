[{"NL": "Find the total revenue generated by campaigns that were successful, defined as campaigns with an actual spent less than the budget.", "Query": "WITH successful\\_campaigns AS (\nSELECT c.id\nFROM campaigns c\nJOIN budgets b ON c.budget\\_id = b.id\nWHERE c.actual\\_spent < b.amount)\nSELECT SUM(o.revenue)\nFROM orders o\nJOIN successful\\_campaigns sc ON o.campaign\\_id = sc.id;"}, {"NL": "List the product display names and their associated supplier reference IDs for all products that are currently active.", "Query": "WITH active\\_users AS (\nSELECT id\nFROM users\nWHERE created\\_at IS NOT NULL\n)\n\nSELECT u.username AS product\\_display\\_name, c.id AS supplier\\_reference\\_id\nFROM client c\nJOIN active\\_users u ON c.username = u.username;"}, {"NL": "Retrieve the campaign name, start date, and end date for all email campaigns that have an open rate greater than 20%.", "Query": "WITH open\\_rates AS (\nSELECT c.campaign\\_name, c.start\\_date, c.end\\_date, COUNT(o.id) AS opens, COUNT(DISTINCT u.id) AS unique\\_users\nFROM client.campaigns c\nJOIN client.email\\_opens o ON c.id = o.campaign\\_id\nJOIN users u ON o.user\\_id = u.id\nGROUP BY c.campaign\\_name, c.start\\_date, c.end\\_date\n)\nSELECT campaign\\_name, start\\_date, end\\_date\nFROM open\\_rates\nWHERE (opens::numeric / unique\\_users) > 20.0;"}, {"NL": "Find all female customers above 40 years old with more than 1000 loyalty points.", "Query": "WITH female\\_users AS (\nSELECT id, username, created\\_at\nFROM users\nWHERE username ILIKE '%female%'\n),\nclient\\_info AS (\nSELECT client.id, client.email, client.created\\_at, client.username, loyalty\\_points\nFROM client\nJOIN (\nSELECT id, username, MAX(created\\_at) AS last\\_login\nFROM female\\_users\nGROUP BY id, username\n) AS female\\_users\\_last\\_login\nON client.username = female\\_users\\_last\\_login.username\nWHERE client.created\\_at < female\\_users\\_last\\_login.last\\_login - INTERVAL '40 years'\n)\nSELECT client\\_info.id, client\\_info.email, client\\_info.username, client\\_info.loyalty\\_points\nFROM client\\_info\nJOIN (\nSELECT id, SUM(loyalty\\_points) AS total\\_points\nFROM client\nGROUP BY id\nHAVING total\\_points > 1000\n) AS total\\_points\nON client\\_info.id = total\\_points.id;"}]